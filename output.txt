make -C lib -e
make[1]: Entering directory '/eNNclave/lib'


Making library in native mode


make[2]: Entering directory '/eNNclave/lib/native'
make[2]: Leaving directory '/eNNclave/lib/native'


Making library in sgx mode


make[2]: Entering directory '/eNNclave/lib/enclave'
cc -I/opt/intel/sgxsdk/include -I/opt/intel/sgxsdk/include/tlibc -I/opt/intel/sgxsdk/include/libcxx -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 app/enclave_u.c -c -o app/enclave_u.o -L/opt/intel/sgxsdk/lib64 -lsgx_urts_sim -lpthread -l:libsgx_capable.a -lsgx_uprotected_fs
cc -I/opt/intel/sgxsdk/include -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 app/wrapper.c -c -o app/wrapper.o
cc -I/opt/intel/sgxsdk/include -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 app/utils.c -c -o app/utils.o
cc -I/opt/intel/sgxsdk/include -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 -shared app/enclave_u.o app/wrapper.o app/utils.o -o libenclave.so -L/opt/intel/sgxsdk/lib64 -lsgx_urts_sim -lpthread -l:libsgx_capable.a -lsgx_uprotected_fs
ln -sf enclave/libenclave.so ../
cc -I/opt/intel/sgxsdk/include -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 app/app.c -c -o app/app.o
cc -I/opt/intel/sgxsdk/include -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 app/enclave_u.o app/app.o app/utils.o -o encrypt_parameters -L/opt/intel/sgxsdk/lib64 -lsgx_urts_sim -lpthread -l:libsgx_capable.a -lsgx_uprotected_fs -L/eNNclave/lib/enclave -lenclave
cc -I/opt/intel/sgxsdk/include -I/opt/intel/sgxsdk/include/tlibc -I/opt/intel/sgxsdk/include/libcxx -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 enclave/enclave_t.c -c -o enclave/enclave_t.o  -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L/opt/intel/sgxsdk/lib64 -Wl,--whole-archive -lsgx_trts_sim -lsgx_tcrypto -lsgx_tservice -lsgx_tprotected_fs -Wl,--no-whole-archive -Wl,--start-group -lsgx_tstdc -lsgx_tcxx -Wl,--end-group -Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined -Wl,-pie,-eenclave_entry -Wl,--export-dynamic -Wl,--defsym,__ImageBase=0 -Wl,--gc-sections -Wl,--version-script=enclave/enclave.lds
Signing enclave
<!-- Default config taken from SGX SampleEnclave -->
<EnclaveConfiguration>
    <ProdID>0</ProdID>
    <ISVSVN>0</ISVSVN>
    <StackMaxSize>0x40000</StackMaxSize>
    <HeapMaxSize>0x100000</HeapMaxSize>
    <TCSNum>10</TCSNum>
    <TCSPolicy>1</TCSPolicy>
    <!-- Recommend changing 'DisableDebug' to 1 to make the enclave undebuggable for enclave release -->
    <DisableDebug>0</DisableDebug>
    <MiscSelect>0</MiscSelect>
    <MiscMask>0xFFFFFFFF</MiscMask>
</EnclaveConfiguration>
tcs_num 10, tcs_max_num 10, tcs_min_pool 1
The required memory is 4194304B.
The required memory is 0x400000, 4096 KB.
Succeed.
Encrypting parameters
Could not open parameter file: No such file or directory


Built enclave in SIMULATION mode


make[2]: Leaving directory '/eNNclave/lib/enclave'
make[1]: Leaving directory '/eNNclave/lib'
make -C interop -e
make[1]: Entering directory '/eNNclave/interop'
cc -fPIC -g -shared pymatutilmodule.c -I/eNNclave/inc -L/eNNclave/lib  -lnative -lenclave -o pymatutil.so
make[1]: Leaving directory '/eNNclave/interop'
2020-07-03 14:33:21.897933: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libnvinfer.so.6'; dlerror: libnvinfer.so.6: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /eNNclave/lib:/opt/intel/sgxsdk/sdk_libs
2020-07-03 14:33:21.898019: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libnvinfer_plugin.so.6'; dlerror: libnvinfer_plugin.so.6: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /eNNclave/lib:/opt/intel/sgxsdk/sdk_libs
2020-07-03 14:33:21.898031: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:30] Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
Setting up data
2020-07-03 14:33:23.538219: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /eNNclave/lib:/opt/intel/sgxsdk/sdk_libs
2020-07-03 14:33:23.538239: E tensorflow/stream_executor/cuda/cuda_driver.cc:351] failed call to cuInit: UNKNOWN ERROR (303)
2020-07-03 14:33:23.538255: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (df331d6d4898): /proc/driver/nvidia/version does not exist
2020-07-03 14:33:23.538453: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2020-07-03 14:33:23.568808: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 1999965000 Hz
2020-07-03 14:33:23.569206: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x577e270 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-07-03 14:33:23.569224: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Loading model from models/mnist.h5
Max required heap size: 3.91015625 MB
Configuring heap size for 126 MB for now
New model:
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 28, 28, 32)        320       
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 28, 28, 64)        18496     
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 14, 14, 64)        0         
_________________________________________________________________
flatten (Flatten)            (None, 12544)             0         
_________________________________________________________________
dropout (Dropout)            (None, 12544)             0         
_________________________________________________________________
dense (Dense)                (None, 128)               1605760   
_________________________________________________________________
dropout_1 (Dropout)          (None, 128)               0         
_________________________________________________________________
enclave_layer (EnclaveLayer) None                      0         
=================================================================
Total params: 1,624,576
Trainable params: 1,624,576
Non-trainable params: 0
_________________________________________________________________
Enclave:
Model: "Enclave"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_1 (Dense)              (None, 10)                1290      
=================================================================
Total params: 1,290
Trainable params: 1,290
Non-trainable params: 0
_________________________________________________________________


Saving model to models/mnist_enclave.h5
Compiling enclave
make -C lib -e
make[1]: Entering directory '/eNNclave/lib'


Making library in native mode


make[2]: Entering directory '/eNNclave/lib/native'
make[2]: Leaving directory '/eNNclave/lib/native'


Making library in sgx mode


make[2]: Entering directory '/eNNclave/lib/enclave'
cc -I/opt/intel/sgxsdk/include -I/opt/intel/sgxsdk/include/tlibc -I/opt/intel/sgxsdk/include/libcxx -I/eNNclave/inc -fPIC -g -DSGX_DEBUG_FLAG=1 enclave/enclave_t.c -c -o enclave/enclave_t.o  -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L/opt/intel/sgxsdk/lib64 -Wl,--whole-archive -lsgx_trts_sim -lsgx_tcrypto -lsgx_tservice -lsgx_tprotected_fs -Wl,--no-whole-archive -Wl,--start-group -lsgx_tstdc -lsgx_tcxx -Wl,--end-group -Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined -Wl,-pie,-eenclave_entry -Wl,--export-dynamic -Wl,--defsym,__ImageBase=0 -Wl,--gc-sections -Wl,--version-script=enclave/enclave.lds
Signing enclave
<EnclaveConfiguration>
    <ProdID>0</ProdID>
    <ISVSVN>0</ISVSVN>
    <StackMaxSize>0x40000</StackMaxSize>
    <HeapInitSize>0x7e00000</HeapInitSize>
    <HeapMaxSize>0x7e00000</HeapMaxSize>
    <TCSNum>10</TCSNum>
    <TCSPolicy>1</TCSPolicy>
    <!-- Recommend changing 'DisableDebug' to 1 to make the enclave undebuggable for enclave release -->
    <DisableDebug>0</DisableDebug>
    <MiscSelect>0</MiscSelect>
    <MiscMask>0xFFFFFFFF</MiscMask>
</EnclaveConfiguration>
tcs_num 10, tcs_max_num 10, tcs_min_pool 1
The required memory is 135270400B.
The required memory is 0x8101000, 132100 KB.
Succeed.
Encrypting parameters


Built enclave in SIMULATION mode


make[2]: Leaving directory '/eNNclave/lib/enclave'
make[1]: Leaving directory '/eNNclave/lib'
Success!


Initializing enclave

Building partial models

Generating results
Enclave NN forward
This is the enclave wrapper
1
0.000000000, 1.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
[0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
tf.Tensor(
[[1.9541009e-09 1.3318804e-08 8.3119221e-07 2.9856203e-06 9.6339905e-09
  6.5507599e-11 5.7932134e-14 9.9998999e-01 1.4991194e-08 6.1736891e-06]], shape=(1, 10), dtype=float32)


Destroying enclave

#include <stdlib.h>
#include <math.h>
#include <stdio.h>

#include "forward.h"

#include "matutil.h"
#include "parameters.h"
#include "enclave_nn.h"
#include "native_nn.h"
#include "output.h"

int enclave_f(float *m, int s, float *ret, int rs) {
    int sts;

    open_parameters();
    float *tmp0 = (float*) malloc(10*sizeof(float));
    if(tmp0 == NULL){
        print_err("\n\nENCLAVE ERROR:Could not allocate tmp0 of size 10\n\n\n");
        return 1;
    }

    float *tmp1 = (float*) malloc(10*sizeof(float));
    if(tmp1 == NULL){
        print_err("\n\nENCLAVE ERROR:Could not allocate tmp1 of size 10\n\n\n");
        return 1;
    }

    float *params = (float*) malloc(1290*sizeof(float));
    if(params == NULL){
        print_err("\n\nENCLAVE ERROR:Could not allocate params of size 1290\n\n\n");
        return 1;
    }   load_parameters(params, 1290);  if ((sts = matutil_multiply(m, 1, 128, params+0, 128, 10, tmp0)))
    return sts;  if ((sts = matutil_add(tmp0, 1, 10, params+1280, 1, 10, tmp0)))
    return sts;
  // get maximum for label
  int max_index = 0;
  for (int i = 1; i < 10; ++i)
    max_index = tmp0[i] > tmp0[max_index] ? i : max_index;
  
  print_out("%d\n", max_index);

  for(int i=0; i< 10; ++i)
    tmp0[i] = i == max_index ? 1 : 0;
  matutil_dump_matrix(tmp0, 1, 10);
  for(int i=0; i<rs; ++i)
    ret[i] = tmp0[i];
  
    free(tmp0);
    free(tmp1);
    free(params);

    close_parameters();
    return 0;
}
